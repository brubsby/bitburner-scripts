//import {  } from "constants.ns"
//import {  } from "common.ns"
//import {  } from "crime.ns"
//import {  } from "training.ns"

const corporation_faction_reputation_requirement = 200e3;

export const factions = {
  "Illuminati": {
    requirements: {
      augmentations: 30,
      money: 150000000000,
      hacking: 1500,
      strength: 1200,
      defense: 1200,
      dexterity: 1200,
      agility: 1200,
    },
  },
  "Daedalus": {
    requirements: {
      augmentations: 30, // multiply by BitNodeMultipliers.DaedalusAugsRequirement
      money: 100000000000,
      hacking: 2500,
      strength: 1500,
      defense: 1500,
      dexterity: 1500,
      agility: 1500,
      hacking_combat_or: true,
    },
  },
  "The Covenant": {
    requirements: {
      augmentations: 20,
      money: 75000000000,
      hacking: 850,
      strength: 850,
      defense: 850,
      dexterity: 850,
      agility: 850,
    },
  },
  // also needs to be employed in the corps
  "ECorp": {
    requirements: {
      company_rep: corporation_faction_reputation_requirement,
    },
  },
  "MegaCorp": {
    requirements: {
      company_rep: corporation_faction_reputation_requirement,
    },
  },
  "Bachman & Associates": {
    requirements: {
      company_rep: corporation_faction_reputation_requirement,
    },
  },
  "Blade Industries": {
    requirements: {
      company_rep: corporation_faction_reputation_requirement,
    },
  },
  "NWO": {
    requirements: {
      company_rep: corporation_faction_reputation_requirement,
    },
  },
  "Clarke Incorporated": {
    requirements: {
      company_rep: corporation_faction_reputation_requirement,
    },
  },
  "OmniTek Incorporated": {
    requirements: {
      company_rep: corporation_faction_reputation_requirement,
    },
  },
  "Four Sigma": {
    requirements: {
      company_rep: corporation_faction_reputation_requirement,
    },
  },
  "KuaiGong International": {
    requirements: {
      company_rep: corporation_faction_reputation_requirement,
    },
  },
  "Fulcrum Secret Technologies": {
    requirements: {
      company_rep: 250e3,
      hack_target: "fulcrumassets",
    },
  },
  "BitRunners": {
    requirements: {
      hack_target: "run4theh111z",
      home_ram: 128,
    },
  },
  "The Black Hand": {
    requirements: {
      hack_target: "I.I.I.I",
      home_ram: 64,
    },
  },
  "NiteSec": {
    requirements: {
      hack_target: "avmnite-02h",
      home_ram: 32,
    },
  },
  //TODO add banned city factions
  "Aevum": {
    requirements: {
      money: 40000000,
      cities: ["Aevum"],
      banned_factions: ["Chongqing", "New Tokyo", "Ishima", "Volhaven",],
    },
  },
  "Chongqing": {
    requirements: {
      money: 20000000,
      cities: ["Chongqing"],
      banned_factions: ["Sector-12", "Aevum", "Volhaven",],
    },
  },
  "Ishima": {
    requirements: {
      money: 30000000,
      cities: ["Ishima"],
      banned_factions: ["Sector-12", "Aevum", "Volhaven",],
    },
  },
  "New Tokyo": {
    requirements: {
      money: 20000000,
      cities: ["New Tokyo"],
      banned_factions: ["Sector-12", "Aevum", "Volhaven",],
    },
  },
  "Sector-12": {
    requirements: {
      money: 15000000,
      cities: ["Sector-12"],
      banned_factions: ["Chongqing", "New Tokyo", "Ishima", "Volhaven",],
    },
  },
  "Volhaven": {
    requirements: {
      money: 50000000,
      cities: ["Volhaven"],
      banned_factions: ["Chongqing", "Sector-12", "New Tokyo", "Aevum", "Ishima",],
    },
  },
  "Speakers for the Dead": {
    requirements: {
      hacking: 100,
      strength: 300,
      defense: 300,
      dexterity: 300,
      agility: 300,
      kills: 30,
      karma: 45,
      banned_companies: ["Central Intelligence Agency", "National Security Agency",],
    },
  },
  "The Dark Army": {
    requirements: {
      hacking: 300,
      strength: 300,
      defense: 300,
      dexterity: 300,
      agility: 300,
      kills: 5,
      karma: 45,
      banned_companies: ["Central Intelligence Agency", "National Security Agency",],
      cities: ["Chongqing"],
    },
  },
  "The Syndicate": {
    requirements: {
      money: 10000000,
      hacking: 200,
      strength: 200,
      defense: 200,
      dexterity: 200,
      agility: 200,
      karma: 90,
      banned_companies: ["Central Intelligence Agency", "National Security Agency",],
      cities: ["Aevum", "Sector-12"],
    },
  },
  "Silhouette": {
    requirements: {
      money: 15000000,
      karma: 22,
      jobs: ["Chief Technology Officer", "Chief Financial Officer", "Chief Executive Officer",],
    },
  },
  "Tetrads": {
    requirements: {
      strength: 75,
      defense: 75,
      dexterity: 75,
      agility: 75,
      karma: 18,
      cities: ["Chongqing", "New Tokyo", "Ishima",],
    },
  },
  "Slum Snakes": {
    requirements: {
      money: 1000000,
      strength: 30,
      defense: 30,
      dexterity: 30,
      agility: 30,
      karma: 9,
    },
  },
  "Netburners": {
    requirements: {
      hacking: 80,
      hacknet_ram: 8,
      hacknet_cores: 4,
      hacknet_levels: 100,
    },
  },
  "Tian Di Hui": {
    requirements: {
      money: 1000000,
      hacking: 50,
      cities: ["Chongqing", "New Tokyo", "Ishima",],
    },
  },
  "CyberSec": {
    requirements: {
      hack_target: "CSEC",
    },
  },
  //"Bladeburners"
};

export const faction_names = Object.keys(factions);

const getAllAugmentations = (ns) => [
  ...new Set(faction_names.map(faction_name =>
    ns.getAugmentationsFromFaction(faction_name)).flat())
  ];

const getNonBannedFactionNames = (ns, player) => Object.entries(factions).filter(factionEntry =>
  !(factionEntry[1].requirements.banned_companies && factionEntry[1].requirements.banned_companies.find(company => Object.keys(player.jobs).includes(company))) &&
  !(factionEntry[1].requirements.banned_factions && factionEntry[1].requirements.banned_factions.find(faction => player.factions.includes(faction))))
  .map(factionEntry => factionEntry[0]);

const getNonBannedFactionsWithAugmentsForSale = (ns, player) => {
  let allOwnedAugmentations = ns.getOwnedAugmentations(true);
  return getNonBannedFactionNames(ns, player)
    .filter(faction_name => ns.getAugmentationsFromFaction(faction_name)
      .filter(augmentation => !allOwnedAugmentations.includes(augmentation))
      .filter(augmentation => augmentation != "NeuroFlux Governor").length);
};

//returns undefined if faction doesn't exist or no requirements
const getFactionRequirements = (ns, faction_names) =>
  faction_names.map(faction_name => [
    faction_name,
    (factions[faction_name] || {}).requirements
  ]
);

//add kills and kamra to the player object
const getAugmentedPlayerData = (ns) => {
  let player = ns.getPlayer();
  // change crimes.ns to write calculated karma and kills to a file to be read here
  player.karma = 999;
  player.kills = 999;

  let hacknetNodes = [...Array(ns.hacknet.getNumNodes()).keys()]
    .map(ns.hacknet.getNodeStats)
  player.hacknet_levels = hacknetNodes.reduce((result, next) => result + next.level, 0)
  player.hacknet_ram = hacknetNodes.reduce((result, next) => result + next.ram, 0)
  player.hacknet_cores = hacknetNodes.reduce((result, next) => result + next.cores, 0)

  return player;
};

const areFactionRequirementsMet = (ns, factionEntry) => {
  let factionName = factionEntry[0];
  let requirements = factionEntry[1];
  let player = getAugmentedPlayerData(ns);
  if (
    (requirements.hack_target && !ns.hasRootAccess(requirements.hack_target)) ||
    (requirements.cities && !requirements.cities.includes(player.city)) ||
    (requirements.jobs && requirements.jobs.every(job => !Object.keys(player.jobs).includes(job))) ||
    (requirements.money && requirements.money > player.money) ||
    (requirements.banned_companies && requirements.banned_companies.find(company => Object.keys(player.jobs).includes(company))) ||
    (requirements.banned_factions && requirements.banned_factions.find(faction => player.factions.includes(faction))) ||
    (requirements.home_ram && requirements.home_ram > ns.getServerMaxRam("home")) ||
    (requirements.augmentations && requirements.augmentations > ns.getOwnedAugmentations()) ||
    (requirements.company_rep && requirements.company_rep > ns.getCompanyRep(factionName)) ||
    (requirements.karma && requirements.karma > player.karma) ||
    (requirements.kills && requirements.kills > player.kills) ||
    (requirements.hacknet_levels && requirements.hacknet_levels > player.hacknet_levels) ||
    (requirements.hacknet_ram && requirements.hacknet_ram > player.hacknet_ram) ||
    (requirements.hacknet_cores && requirements.hacknet_cores > player.hacknet_cores)) {
    return false;
  }
  if (requirements.hacking_combat_or) {
    if ((requirements.hacking && requirements.hacking > player.hacking_skill) &&
    ((requirements.strength && requirements.strength > player.strength) ||
    (requirements.defense && requirements.defense > player.defense) ||
    (requirements.dexterity && requirements.dexterity > player.dexterity) ||
    (requirements.agility && requirements.agility > player.agility))) {
      return false;
    }
  } else {
    if ((requirements.hacking && requirements.hacking > player.hacking_skill) ||
    (requirements.strength && requirements.strength > player.strength) ||
    (requirements.defense && requirements.defense > player.defense) ||
    (requirements.dexterity && requirements.dexterity > player.dexterity) ||
    (requirements.agility && requirements.agility > player.agility)) {
      return false;
    }
  }
  return true;
};

const getFactionsWithMetRequirements = (ns) => Object.entries(factions)
  .filter((factionEntry) => areFactionRequirementsMet(ns, factionEntry));

// const getUnmetRequirements = (ns, factionName) => {
//   let requirements = factions[factionName].requirements

export async function main(ns) {
  let player = ns.getPlayer();
  let allOwnedAugmentations = ns.getOwnedAugmentations(true);
  let unknownedAugmentationsFromNonBannedFactions = getNonBannedFactionsWithAugmentsForSale(ns, player)
    .map(factionName =>
      [
        factionName,
        ns.getAugmentationsFromFaction(factionName)
          .filter(augmentation => !allOwnedAugmentations.includes(augmentation))
      ]);
  ns.tprint(JSON.stringify(unknownedAugmentationsFromNonBannedFactions, null, 2));
}
