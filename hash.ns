const max_buffer = 100;
const travel_cost = 200e3;

const handleSecondaryMoney = (ns) => {
  while ((ns.hacknet.numHashes() > ns.hacknet.hashCapacity() - max_buffer) ||
    (ns.hacknet.numHashes() > ns.hacknet.hashCost("Sell for Money") &&
      ns.getPlayer().money < travel_cost)) {
    if(!ns.hacknet.spendHashes("Sell for Money")) {
      break;
    }
  }
}

const hash_goals = {
  MONEY: "money",
  POOL: "pool",
  MAXUNI: "maxuni",
  MAXGYM: "maxgym",
  MAXTRAINING: "maxtraining",
  SERVER: "server",
  CONTRACTS: "contracts",
  BLADEBURNER: "bladeburner",
  SKILLPOINTS: "skillpoints",
  RANK: "rank",
};

let hash_goal;
let target;
let print_goal;

export async function main(ns) {
  let flags = ns.flags([
    ["goal", ""],
    ["target", ""],
    ["debug", false],
    ["print", false],
  ]);

  const goalArg = (flags.goal || flags._[0] || "").toUpperCase();
  const targetArg = flags.target || flags._[1];

  if (goalArg) {
    if (!hash_goals[goalArg]) {
      ns.tprint(`invalid goal specified: ${goalArg}`);
      ns.exit();
      return;
    }
    hash_goal = hash_goals[goalArg];
    if (flags.debug) ns.tprint(`hash_goal: ${hash_goal}`);

  }

  if (targetArg) {
    if (hash_goal == hash_goals.SERVER && !ns.serverExists(targetArg)) {
      ns.tprint(`"${targetArg}" is not a valid server to target`);
    } else {
      target = targetArg;
    }
  }

  if (flags.print) {
    print_goal = true;
  }

  if (ns.ps(ns.getHostname()).filter(server =>
      server.filename == ns.getScriptName()).length > 1) {
    print_goal = true;
    ns.exit();
    return;
  }

  if (!hash_goal) hash_goal = hash_goals.POOL;

  while (true) {
    if (print_goal) {
      ns.tprint(`hash goal: ${hash_goal}, hash target: ${target}`);
      print_goal = false;
    }

    handleSecondaryMoney(ns);
    switch (hash_goal) {
      case hash_goals.POOL:
        break;
      case hash_goals.MAXUNI:
      case hash_goals.MAXGYM:
      case hash_goals.MAXTRAINING:
        while ([hash_goals.MAXUNI, hash_goals.MAXTRAINING].includes(hash_goal)
          && ns.hacknet.spendHashes("Improve Studying"));
        while ([hash_goals.MAXGYM, hash_goals.MAXTRAINING].includes(hash_goal)
          && ns.hacknet.spendHashes("Improve Gym Training"));
        break;
      case hash_goals.BLADEBURNER:
      case hash_goals.SKILLPOINTS:
      case hash_goals.RANK:
        while ([hash_goals.BLADEBURNER, hash_goals.SKILLPOINTS].includes(hash_goal)
          && ns.hacknet.spendHashes("Exchange for Bladeburner SP"));
        while ([hash_goals.BLADEBURNER, hash_goals.RANK].includes(hash_goal)
          && ns.hacknet.spendHashes("Exchange for Bladeburner Rank"));
        break;
      case hash_goals.MONEY:
        if (flags.debug) ns.print(`Executing money loop`);
        while (ns.hacknet.spendHashes("Sell for Money"));
        break;

      case hash_goals.SERVER:
        while (hash_goals.SERVER == hash_goal &&
          ns.serverExists(target) &&
          ns.hacknet.spendHashes("Reduce Minimum Security", target));
        while (hash_goals.SERVER == hash_goal &&
          ns.serverExists(target) &&
          ns.hacknet.spendHashes("Increase Maximum Money", target));
        break;
      case hash_goals.CONTRACTS:
        while (hash_goals.CONTRACTS == hash_goal
          && ns.hacknet.spendHashes("Generate Coding Contract"));
        break;
    }

    await ns.sleep(1000);
  }
}
